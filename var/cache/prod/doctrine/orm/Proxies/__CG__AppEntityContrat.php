<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Contrat extends \App\Entity\Contrat implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'client', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'surface', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'loyer', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'FrequencePayement', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'DernierLoyer', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'ProchaineEcheance', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'MontantRestant', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'archivé'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'client', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'surface', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'loyer', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'FrequencePayement', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'DernierLoyer', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'ProchaineEcheance', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'MontantRestant', '' . "\0" . 'App\\Entity\\Contrat' . "\0" . 'archivé'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Contrat $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getClient(): ?\App\Entity\Client
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClient', []);

        return parent::getClient();
    }

    /**
     * {@inheritDoc}
     */
    public function setClient(?\App\Entity\Client $client): \App\Entity\Contrat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClient', [$client]);

        return parent::setClient($client);
    }

    /**
     * {@inheritDoc}
     */
    public function getSurface(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSurface', []);

        return parent::getSurface();
    }

    /**
     * {@inheritDoc}
     */
    public function setSurface(?string $surface): \App\Entity\Contrat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSurface', [$surface]);

        return parent::setSurface($surface);
    }

    /**
     * {@inheritDoc}
     */
    public function getLoyer(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLoyer', []);

        return parent::getLoyer();
    }

    /**
     * {@inheritDoc}
     */
    public function setLoyer(?float $loyer): \App\Entity\Contrat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLoyer', [$loyer]);

        return parent::setLoyer($loyer);
    }

    /**
     * {@inheritDoc}
     */
    public function getFrequencePayement(): ?\DateInterval
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFrequencePayement', []);

        return parent::getFrequencePayement();
    }

    /**
     * {@inheritDoc}
     */
    public function setFrequencePayement(?\DateInterval $FrequencePayement): \App\Entity\Contrat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFrequencePayement', [$FrequencePayement]);

        return parent::setFrequencePayement($FrequencePayement);
    }

    /**
     * {@inheritDoc}
     */
    public function getDernierLoyer(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDernierLoyer', []);

        return parent::getDernierLoyer();
    }

    /**
     * {@inheritDoc}
     */
    public function setDernierLoyer(?\DateTimeInterface $DernierLoyer): \App\Entity\Contrat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDernierLoyer', [$DernierLoyer]);

        return parent::setDernierLoyer($DernierLoyer);
    }

    /**
     * {@inheritDoc}
     */
    public function getProchaineEcheance(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProchaineEcheance', []);

        return parent::getProchaineEcheance();
    }

    /**
     * {@inheritDoc}
     */
    public function setProchaineEcheance(?\DateTimeInterface $ProchaineEcheance): \App\Entity\Contrat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProchaineEcheance', [$ProchaineEcheance]);

        return parent::setProchaineEcheance($ProchaineEcheance);
    }

    /**
     * {@inheritDoc}
     */
    public function getMontantRestant(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMontantRestant', []);

        return parent::getMontantRestant();
    }

    /**
     * {@inheritDoc}
     */
    public function setMontantRestant(?float $MontantRestant): \App\Entity\Contrat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMontantRestant', [$MontantRestant]);

        return parent::setMontantRestant($MontantRestant);
    }

    /**
     * {@inheritDoc}
     */
    public function isArchivé(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isArchivé', []);

        return parent::isArchivé();
    }

    /**
     * {@inheritDoc}
     */
    public function setArchivé(bool $archivé): \App\Entity\Contrat
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArchivé', [$archivé]);

        return parent::setArchivé($archivé);
    }

}
